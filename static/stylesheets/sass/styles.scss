/*!
 *	Empty-coop:
 *  A front-end starting point from the team at Hatchd
 *
 *	@Author Hatchd Digital
 *
 *  ...HHH...........................................HH ................DDD....
 *  ...HHH.......................TT .................HH.................DDD....
 *  ...HHH.......................TT..................HH.................DDD....
 *  ...HHHHHHHH..... AAAAAA......TTTTTT....CCCCCC....HHHHHHHN..... DDDDDDDD....
 *  ...HHHHHHHHH ...AAAAAAAAA....TTTTTT...CCCCCCCC...HHHHHHHHH... DDDDDDDDD....
 *  ...HHH... HH..........AAA....TTT..... CCC........HH....HHH....DD....DDD....
 *  ...HHH... HH.....AAAAAAAA....TTT......CC.........HH....HHH...DDD....DDD....
 *  ...HHH... HH....AAA...AAA....TTT......CC ........HH....HHH...DDD....DDD....
 *  ...HHH... HH....AAA...AAA....TTT..... CCC........HH....HHH....DD....DDD....
 *  ...HHH... HH....AAA..AAAA....TTT..... CCCC..CC...HH....HHH....DDD..DDDD....
 *  ...HHH... HH.....AAAAAAAA....TTTTTT....CCCCCCC...HH....HHH.... DDDDDDD.....
 *
 */

/**
 * Settings
 *
 * Define colours, text sizes etc... before any styles are pulled in
 * Also, establish grid type and settings
 */
    @import 'settings';
/**
 * Mixins
 *
 * Define predefined mixins, and custom mixins (optional) that can be
 * set on a per-project basis
 */
    @import 'mixins/predefined-mixins';
    @import 'mixins/custom-mixins';
    @import 'mixins/grid';
    @import 'mixins/eggbox';

/**
 * Establish any resource using an @rule
 *
 * Set rules for any CSS resource requiring an @ prefix,
 * such as @animate rules or @font-face fonts
 */
	@import 'resources/webfonts';

/**
 * Create a clean slate
 *
 * Ensure we level any browser differences, so we can build any
 * subsequent declarations on level ground
 */
	@import 'html-elements/normalize';

/**
 * Set base rules that can apply site-wide
 *
 * These should apply to naked elements, no classes should be defined here
 */
	@import 'html-elements/typography';
	@import 'html-elements/code';
	@import 'html-elements/links';
	@import 'html-elements/formelements';
	@import 'html-elements/images';
	@import 'html-elements/tables';

/**
 * Define display fixes
 *
 * non-presentational classes, used to achieve functional things like
 * clearing floats, visually hiding elements etc...
 */
	@import 'display-fixes';

/**
 * Define modular components
 *
 * Reusable components, called with a class (or classes)
 * that can exist anywhere in the site
 */
    //@import 'reusable-components/#';

/**
 * Set static page elements
 *
 * The scaffolding of the site, defined through elements that occur only
 * once per page, defined via an aria role or ID
 */
    @import 'page-elements/page-outer';
    @import 'page-elements/page-header';
    @import 'page-elements/page-content';
    @import 'page-elements/page-footer';

/**
 * Set page layout(s)
 *
 * Rules unique to a specific template or set of templates.
 * These definitions should be set from a unique class
 */
    @import 'page-layouts/layout-template';

