/// Predefined mixins
/// A set of SASS mixins to make common css tasks that little bit easier


/// Automagically set an element's width/height
/// @param {List | String} $args Width and/or height
@mixin setsize($args) {
  $arglen: length($args);
  @if($arglen > 1){
    width: nth($args,1);
    height: nth($args,2);
  }@else{
    width: $args;
    height: $args;
  }
}

/// Automagically set items evenly in a line
/// @param {Number} $item-number Number from 0-100
@mixin dist($item-number){
  width: (100 / $item-number)#{'%'};
}

/// Make pure CSS triangles
/// @param {List | String} $dir - One or two direction keyword(s): top right bottom left
/// @param {String} $color - Triangle color. Can be a raw color value or called using color(color) (default: black)
/// @param {Number} $size - Triangle size. (default: 1em)
@mixin triangle($dir, $color:black, $size:1em){
    $dir: triangle-getdir($dir);
    content:' ';
    display:block;
    width:0;
    height:0;
    border:$size solid transparent;
    // Set borders
    @each $prop in $dir{
      border-#{$prop}-color: $color;
    }
    // If 2 borders are set (eg: top right)
    // make triangle smaller
    @if length($dir) > 1{
      border-width:$size/1.25;
    }
}

/// Translate desired direction into
/// the correct border side
@function triangle-getdir($dir){
  $dirs:(
    top: bottom,
    right: left,
    bottom: top,
    left: right
  );
  @if length($dir) == 1{
    $dir: map-get($dirs,$dir);
  }
  @else{
    $dir: $dir;
  }
  @return $dir;
}



/**
 * Set position and position values
 * Set positioning stuff easier
 * $value: String containing valid css position value
 * $coordinates: Space-seperated list.
 * - For top/right/bottom/left values: Direction followed by unit. Percentage units must be quoted:
 * - (eg t20px - top: 20px, or 'b50%' - bottom: 50%)
 * - For z-index value, a number from 0 upwards, or unquoted string - auto
 */

@mixin pos($value,$coords:false){

    // Tie shorthand position properties
    // to valid ones using a map.
    // 'sticky' and 'static' have no shortcut,
    // as they share the same first letter
    $fullpos:(
      r: relative,
      a: absolute,
      f: fixed,
      i: inherit
    );
    
    // Tie shorthand coordinate properties
    // to valid css ones using a map
    $fullprops:(
        t: top,
        r: right,
        b: bottom,
        l: left
    );

    // Set position value
    @if (map-has-key($fullpos,$value)){
      $value: map-get($fullpos,$value);
    }
    position: $value;
    
    // Set position coordinates
    @if ($coords != false){
        @each $group in $coords{
            // If value is string or not 'auto', set as position prop/value pair
            @if(type-of($group) != number and $group != 'auto'){
              // Grab the raw property
              $rawprop: str-slice($group,0,1);
              // tie it to it's valid css counterpart
              $prop: map-get($fullprops,$rawprop);
              // Grab the value
              $value: str-slice($group,2);
              // Set these to make a regular ol'
              // property-value pair
              #{$prop}: unquote($value);
            }
            // If value is number or 'auto', set as z-index prop/value pair
            @else{
              z-index: $group;
            }
        }
    }
    
}

/**
* Responsive elem ratio
* @src: http://www.wmyl.se/en/blog/proportional-scaling-responsive-boxes-using-just-css
**/

// Convert image ratio to a percentage
// @src: http://www.goldenapplewebdesign.com/responsive-aspect-ratios-with-pure-css/
@function ratiotopercent($ratio){
    $ratio-converted: '';
    // Get width and height
    $ratio-w: nth($ratio,1);
    $ratio-h: nth($ratio,2);
    // Convert ratio to a percentage
    $ratio-converted: ($ratio-h / $ratio-w) * 100 + '%';
    @return unquote($ratio-converted);
}

// Create styles with a mixin
// $child arg: string, quoted if an & selector is needed
// $ratio arg: list with 2 items - width height
@mixin propelem($child,$ratio){
    $child-pseudo: false;
    @if ($child == '&:before') or ($child == '&:after'){
        $child-pseudo: true;
    }
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: ratiotopercent($ratio);
    #{$child}{
        @if $child-pseudo == true{
            content:' ';
            display: block;
        }
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}
