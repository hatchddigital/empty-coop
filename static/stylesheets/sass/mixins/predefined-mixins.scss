/**
 * Predefined mixins
 *
 * A set of SASS mixins to make common css tasks that little bit easier
 *
 */

/**
 * Set size
 * Automagically set the width/height for a block-level element
 *
 * Accepts a list of up to 2 arguments
 * If 1 argument: Width and height get set to the same value
 * If 2 arguments: Width uses the first value, Height uses the second value 
 */
    @mixin setsize($args) {
        $arglen: length($args);
        @if($arglen > 1){
            width: nth($args,1);
            height: nth($args,2);
        }@else{
            width: $args;
            height: $args;
        }
    }

/**
 * Evenly distribute items
 * Automagically set items evenly in a line
 *
 * @param item-number: number of items to distribute
 */
    @mixin dist($item-number){
       width: (100 / $item-number)#{'%'};
    }

/**
 * CSS triangles
 * Make pure CSS triangles
 * Useful for pointers and tooltips
 */

    // Translate desired direction into 
    // the correct border side
    @function triangle-getdir($dir){
      $dirs:(
        top: bottom,
        right: left,
        bottom: top,
        left: right
      );
      @if length($dir) == 1{
        $dir: map-get($dirs,$dir);
      }
      @else{
        $dir: $dir;
      }
      @return $dir;
    }

    // Put it all together in a mixin
    @mixin triangle($dir, $color:black, $size:1em){
        $dir: triangle-getdir($dir);
        content:' ';
        display:block;
        width:0;
        height:0;
        border:$size solid transparent;
        // Set borders
        @each $prop in $dir{
          border-#{$prop}-color: $color;
        }
        // If 2 borders are set (eg: top right)
        // make triangle smaller
        @if length($dir) > 1{
          border-width:$size/1.25;
        }
    }

/**
 * Set font properties
 * Set all properties within the font{}
 * namespace, and line-height.
 * Font sizes can be loose, or from the font size map.
 * Font famillies need to be from the font family map.
 */
    @mixin font(
        $size: $size,
        $lineheight: false,
        $family: false,
        $weight: false,
        $style: false)
    {
        font:{
            @each $property,$value in (
               weight:$weight,
               style:$style,
               family:get($font-famillies,$family),
               size: get($font-sizes, $size, false, false)
            ){
                @if $value {
                    #{$property}: $value;
                }
            }
        };
        @if $lineheight{
            line-height: $lineheight;
        }
    }
