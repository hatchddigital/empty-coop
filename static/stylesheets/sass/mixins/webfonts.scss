//// Webfonts mixin
//// @author Jack Armley
//// @group fonts

/// Make consistent @font-face declarations
/// @author Jack Armley
/// @group fonts
/// @param {String} $familyname Font family name
/// @param {String} $svgfamilyname [false] SVG family name
/// @param {String} $filename [false] Font file name
/// @param {String} $location [false] Font file location
/// @param {String|List} $filetypes [eot woff ttf svg] Font filetypes
/// @require {Function} fontsrc
@mixin fontface($familyname, $svgfamilyname: false, $filename: false, $location: false, $filetypes: eot woff ttf svg){
  $eot: contains($filetypes,eot);
  @font-face{
    font-family: $familyname;
    @if ($eot != false){
      src: fontsrc($svgfamilyname,$filename,$location,eot);
    }
    src: fontsrc($svgfamilyname,$filename,$location,$filetypes);
  }
}

/// Parse font information for the fontface mixin
/// @author Jack Armley
/// @group fonts
/// @param {String} $svgfamilyname SVG family name
/// @param {String} $filename Font file name
/// @param {String} $location Font file location
/// @param {String|List} $filetypes Font filetypes
@function fontsrc($svgfamilyname,$filename,$location,$filetypes){
  
  // Make a few starting vars
  $typestring:'';
  $format:'';
  $i: 1;
  $l: length($filetypes);
  
  // Loop through the $filetypes string
  // and make the file urls
  @each $type in $filetypes{
    
    // Generate format vars for each filetype
    @if ($type == 'eot'){
      $format: 'embedded-opentype';
    }@else if($type == 'ttf'){
      $format: 'truetype';
    }@else{
      $format: $type;
    }
    
    // If multiple filetypes are passed add iefix part to url
    // If only one is passed, assume it is the seperate eot file src
    @if ($l > 1){
      @if ($type == 'eot'){
        $type: $type + '?#iefix';
      }
    }
    
    // If svg filetype is passed,
    // Add svg family name to type string
    @if ($type == 'svg'){
      $type: $type + '#' + $svgfamilyname;
    }

    // Generate the url string
    $typestring: $typestring + 'url("#{$location}/#{$filename}.' + $type + '")';
    
    // If multiple filetypes are passed add format to each url
    @if ($l > 1){
      $typestring: $typestring + ' format("' + $format + '")'
    }
    
    // Comma seperate each url
    @if($i < $l){
      $typestring: $typestring + ',';
    }
    
    // add to the iteration variable
    $i: $i + 1;
  }
  
  // Return the string(s)
  @return unquote($typestring);
  
}