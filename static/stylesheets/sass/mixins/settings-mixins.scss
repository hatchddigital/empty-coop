/**
 * Settings mixins / functions
 *
 * Helpers that relate directly to the settings files
 */

/**
 * Reusable functions
 */

    // Getter/setter for maps
    @function get($map, $key, $index:false, $strict: true){
        $output:'';
        @if (map_has_key($map,$key)){
            // If map has multi-value objects
            @if ($index){
                $output: nth(map-get($map,$key),$index);
            }
            // If map is simple
            @else{
                $output: map-get($map,$key);
            }
            @return $output;
        }
        @else{
            @if $strict{
                @warn '#{$key} is not a valid value';
                @return false;
            }
            @else{
                @return $key;
            }
        }
    }

    // Aliases for common map calls
    @function fontsize($size){
        $size: get($font-sizes,$size);
        @return $size;
    }
    @function fontfamily($family){
        $family: get($font-famillies,$family);
        @return $family;
    }
    @function color($color){
        $color: get($colors,$color,1);
        @return $color;
    }

/**
 * Responsive breakpoints
 */

    // Retrieve  breakpoint type
    @function get-breakpoint-value($point, $type, $index, $convertValue: true) {
        $values: get($breakpoints, $point);
        $convertValue: $convertValue;
        $items: ();
        @if $type == 'orientation' {
            $items: nth($values, 3);
            $convertValue: false;
        }
        @else if $type == 'height' {
            $items: nth($values, 2);
        }
        @else if $type == 'width' {
            $items: nth($values, 1);
        }
        @if length($items) >= $index {
            $value: nth($items, $index);
            @if $value {
                @if $convertValue {
                    @return pxem(nth($items, $index));
                }
                @else {
                    @return nth($items, $index);
                }
            }
        }
        @return false;
    }

    // Convert pixel breakpoint value to em
    @function pxem($target){
        @return ($target / 16)#{'em'};
    }

    // Get min-width breakpoint value
    @function minw($point) {
        $value: get-breakpoint-value($point, 'width', 1);
            @if $value {
                @return 'and (min-width: ' + $value + ')';
            }
        @return '';
    }

    // Get max-width breakpoint value
    @function maxw($point) {
        $value: get-breakpoint-value($point, 'width', 2);
            @if $value {
                @return 'and (max-width: ' + $value + ')';
            }
        @return '';
    }

    // Get min-height breakpoint value
    @function minh($point) {
        $value: get-breakpoint-value($point, 'height', 1);
            @if $value {
                @return 'and (min-height: ' + $value + ')';
            }
        @return '';
    }

    // Get max-height breakpoint value
    @function maxh($point) {
        $value: get-breakpoint-value($point, 'height', 2);
            @if $value {
                @return 'and (max-height: ' + $value + ')';
            }
        @return '';
    }

    // Get orientation breakpoint value
    @function orientation($point) {
        $value: get-breakpoint-value($point, 'orientation', 1);
            @if $value {
                @return 'and (orientation: ' + $value + ')';
            }
        @return '';
    }

    // Build the media query
    @function sizes($point) {
        @return minw($point) + maxw($point) + minh($point) + maxh($point) + orientation($point);
    }

    // Set breakpoint mixin
    @mixin breakpoint($point){
      @if $mq-support {
        @if $point != 'retina'{
            @media screen #{sizes($point)} {
              @content
            }
        }
        @else {
            @media (-webkit-min-device-pixel-ratio: 2),(min-resolution: 192dpi){
                @content;
            }
        }
      }
      @else {
        @if index($static-breakpoints,$point){
          @content
        }
      }
    }

