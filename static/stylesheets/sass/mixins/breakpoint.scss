////
/// Media queries
/// @group media queries
/// @author Jack Armley
////

/// Set media query support to true
/// as default. This is restated at the head of
/// all master sass files that call manifest.scss
/// @group media queries
/// @type Variable
$mqsupport: true !default;


/// Construct simple or complex media queries
/// @author Jack Armley
/// @group media queries
/// @param {List|String} $points - Breakpoint keyword(s) to process.
/// A single breakpoint value can be used, or multiple values can
/// be combined to create more complex media queries.
/// @require {Variable} $breakpoints
/// @example
///   p{
///     // A simple media query, that calls
///     //one value from the $breakpoints map
///     @include breakpoint(pebble){
///       color: red;
///     }
///     // A more complex query, 
///     // using operator variables
///     @include breakpoint(pebble AND portrait OR rock AND landscape){
///       color: blue;
///     }
///   }  
@mixin breakpoint($points){
  // Find length of the breakpoint
  $pointlength: length($points);
  
  // Get point type
  $pointtype: type-of($points);
  
  @if ($mqsupport == true){
    // If media queries are supported,
    // output a media query
    @media #{pointstring($points)}{
      @content
    }
  }
  @else{
    // If media queries aren't supported,
    // **and** only one query type has been included,
    // **and** it has been allowed to be used on browsers
    // that don't support media queries
    // **or** if it is a manually entered query
    // that has been allowed to be used on browsers
    // that don't support media queries, then
    // output styles outside of a media query block
    @if (usenomq($points) == true) {
      @if $pointtype != 'map' and $pointlength == 1{
        @content
      }
      @else{
        @content
      }
    }
  }
}

/// Breakpoint map helpers
/// @type Variable
/// @group media queries
$point-helpers: nomq media;

/// Convert pixel values to em
/// @author Jack Armley
/// @group media queries
/// @param {Number} $point - Font size in px
@function pxem($point){
  $unitlesspoint: $point / ($point * 0 + 1);
  $convpoint: ($unitlesspoint / 16)#{em};
  @return $convpoint;
}

/// Determine whether the $point argument
/// is a map. If so, it means a manual
/// breakpoint has been entered
/// @author Jack Armley
/// @group media queries
/// @param {String} $point - Breakpoint keyword to process
/// @param {Variable} $map [$breakpoints] - Breakpoint map to use
@function pointtype($point,$map:$breakpoints){
  $type: type-of($point);
  @if ($type != 'map'){
    $point: map-get($map,$point);
  }@else{
    $point: $point;
  }
  @return $point;
}

/// Process a breakpoint to return a  valid media query
/// @author Jack Armley
/// @group media queries
/// @param {String} $point - Breakpoint keyword to process
/// @param {Bool} $mediaprefix [false] - Whether or not to include media type prefix (eg: `screen`)
/// @param {Bool} $convertem [true] - Whether or not to convert px values to em
@function process($point, $mediaprefix:false, $convertem:true){
  $querystr: '';
  $point: pointtype($point);
  $pointlength: length($point);
  $i: 1;
  
  @each $name, $value in $point{
    @if(contains($point-helpers,$name) == true){
      $pointlength: $pointlength - 1;
    }
  }
  
  @each $name, $value in $point{
    // Only process points that contain valid values
    @if (contains($point-helpers,$name) == false){
      @if (unit($value) == 'px'){
        @if ($convertem != false){
          $value: pxem($value);
        }
      }
      $querystr: $querystr + '(' + $name + ':' + $value + ')';
      @if ($i < $pointlength){
        $querystr: $querystr + ' and ';
      }
      $i: $i + 1;
    }
    // Add media prefix
    @if $mediaprefix != false{
      @if $name == media{
        $querystr: $value + ' and ' + $querystr;
      }
    }
  }
  @return $querystr;
}


/// Check if breakpoint has been given the ok to be used for
/// browsers that don't support media queries
/// @author Jack Armley
/// @group media queries
/// @param {String} $point - Breakpoint keyword to process
@function usenomq($point){
  $usage: '';
  $point: pointtype($point);
  @each $name, $value in $point{
    @if ($name == nomq){
        $usage: $value;
    }
  }
  @return $usage;
}

/// Function to pass breakpoints to an element for use by JS, 
/// using the css content attr
/// @author Jack Armley
/// @group media queries
/// @param {Map} $map [$breakpoints] - Breakpoint map to use
@function pointlist($map:$breakpoints){
  $newpoint:'';
  $i: 1;
  @each $point, $value in $map{
    // We use double quotes here in the key name because cssmin strips one
    $newpoint: $newpoint + '""' + $point + '"": ' + '"' + process($point) + '"';
    @if $i < length($map){
      $newpoint: $newpoint + ',';
    }
    $i: $i + 1;
  }
  @return '{' + $newpoint + '}';
}

/// Construct the full media query string
/// @author Jack Armley
/// @group media queries
/// @param {List|String} $points - Breakpoint keyword(s) to process
@function pointstring($points){
  $pointstring: '';
  $pointtype: type-of($points);
  $mediaprefix: '';
  $operators:(
    AND : 'and',
    OR : ','
  );
  $i: 1;
  
  @if( $pointtype != 'map'){
    @each $point in $points{
      // If an operator, process and convert accordingly
      @if( map-has-key($operators,$point) == true ){
        $point: map-get($operators,$point);
      }
      // If a regular point, process and convert accordingly
      @else{
        // Figure out whether a prefix should be added
        // Should be if the queey is first in the string,
        // or if the query is preceeded by an 'OR' operator
        $mediaprefix: false;
        @if($i == 1) or ((nth($points,($i - 1))) == OR){
          $mediaprefix: true;
        }
        $point: process($point, $mediaprefix);
      }
      $pointstring: $pointstring + $point + ' ';
      $i: $i + 1;
    }
  }
  @else{
    $pointstring: process($points,$mediaprefix);
  }
  @return $pointstring;
}
