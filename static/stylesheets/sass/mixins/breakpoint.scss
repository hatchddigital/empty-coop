/**
 * Breakpoint functions
 */

// Set a function to convert
// pixel values to em
// (only used for values suffixed with 'px')
@function pxem($point){
  $unitlesspoint: $point / ($point * 0 + 1);
  $convpoint: ($unitlesspoint / 16)#{em};
  @return $convpoint;
}

// Process a breakpoint, and return a
// valid media query
@function process($point, $convertem:true, $map:$breakpoints){
  $point: map-get($map,$point);
  $querystr: '';
  @each $name, $value in $point{
    @if $name != nomq{
      @if (unit($value) == 'px'){
        @if ($convertem != false){
          $value: pxem($value);
        }
      }
      $querystr: $querystr + 'and(' + $name + ':' + $value + ') ';
    }
  }
  @return $querystr;
}

// Check if breakpoint has
// been given the ok to be used for
// browsers that don't support media queries
@function usenomq($point,$map: $breakpoints){
  $point: map-get($map,$point);
  $usage: '';
  @each $name, $value in $point{
    @if ($name == nomq){
        $usage: $value;
    }
  }
  @return $usage;
}

// Function to pass breakpoints to an
// element for use by JS, using the css content attr
@function pointlist($map){
  $newpoint:'';
  $i: 1;
  @each $point, $value in $map{
    // We use double quotes here in the key name because cssmin strips one
    $newpoint: $newpoint + '""' + $point + '"": ' + '"' + process($point) + '"';
    @if $i < length($map){
      $newpoint: $newpoint + ',';
    }
    $i: $i + 1;
  }
  @return '{' + $newpoint + '}';
}

// Define breakpoint mixin.
// For browsers that don't support media queries,
// set $mqsupport to false, and styles will be returned as normal
// (ie: not wrapped in a media query)
@mixin breakpoint($point){
  // Set media query support to true
  // as default. This is restated at the head of
  // all master sass files that call manifest.scss
  $mqsupport: true !default;
  @if ($mqsupport == true){
    @media screen #{process($point)}{
       @content
    }
  }
  @else{
    @if (usenomq($point) == true) {
        @content
    }
  }
}
