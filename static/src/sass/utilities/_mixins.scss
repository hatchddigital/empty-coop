// ==========================================================================
// Mixins
// ==========================================================================

// Breakpoint
// A simple mixin for generating @media queries
// $point - The map key from the $breakpoints map that references
// a certain width/height value
// $type - Defaults to min-width, can be set to any desired type
// ==========================================================================
@mixin breakpoint($point, $type: min-width) {
    // The breakpoint value
    $value: map-get($breakpoints , $point);

    @media ($type: $value) {
        @content;
    }
}

// Fluid fonts sizes
// $font-min - The minimum font size shown
// $font-max - The maximum font size shown
// $screen-min - The breakpoint where fluid fonts start scaling
// $screen-max - The breakpoint where fluid fonts stop scaling
// ==========================================================================
@mixin fluidfont($font-min: 13px, $font-max: 18px, $screen-min: 400px, $screen-max: 1000px) {
    font-size: $font-min;
    $fontunit: unit($font-min);
    $screenunit: unit($screen-min);
    @if($screenunit != 'px') {
        @warn('fluidfont: $screen-min and $screen-max must be in px');
    }
    @if($fontunit != 'px' and $fontunit != 'rem' ) {
        @warn('fluidfont: $font-min and $font-max must be in px, or rem');
    }
    @if($fontunit != 'px') {
        $screen-max: strip-unit($screen-max) / strip-unit($font-size-base) * (1 + $fontunit);
        $screen-min: strip-unit($screen-min) / strip-unit($font-size-base) * (1 + $fontunit);
    }
    @media (min-width: $screen-min) {
        font-size: calc(#{$font-min} + (#{strip-unit($font-max)} - #{strip-unit($font-min)}) * (100vw - #{$screen-min}) / (#{strip-unit($screen-max)} - #{strip-unit($screen-min)}));
    }
    @media (min-width: $screen-max) {
        font-size: $font-max;
    }
}

// Fluid heading sizes with eye pleasing ratios
// ==========================================================================
@mixin fluidheadings($font-min: 1rem, $font-max: .5rem, $multiplier-min: 1.067, $multiplier-max: 1.333, $screen-min: 400px, $screen-max: 1000px) {
    $font-min-unit: unit($font-min);
    $font-max-unit: unit($font-max);
    @for $i from 1 through 6 {
        $font-max: strip-unit($font-max) * $multiplier-max;
        $font-min: strip-unit($font-min) * $multiplier-min;
        h#{7 - $i} {
            @include fluidfont($font-min * (1 + $font-min-unit), $font-max * (1 + $font-max-unit), $screen-min, $screen-max);
        }
    }
}

// Grid layout with optional column/row spacing
// $grid-item - The selector for the items inside the parent grid container
// $columns - How many columns the grid consists of
// $col-gap - The spacing between each grid column
// $row-gap - The spacing between each grid row
// ==========================================================================
@mixin grid($grid-item, $columns, $col-gap: 0, $row-gap: $col-gap) {
    // Fallback for browsers that don't support grid
    display: flex;
    flex-wrap: wrap;
    margin-top: -$row-gap;
    margin-left: -$col-gap;

    #{$grid-item} {
        width: (100% / #{$columns});
        @if ($col-gap > 0) {
            width: calc((100% - #{$col-gap} * #{$columns}) / #{$columns});
        }
        margin-top: $row-gap;
        margin-left: $col-gap;
    }

    // Grid layout for supported browsers
    @supports(display: grid) {
        display: grid;
        grid-template-columns: repeat($columns, 1fr);
        grid-column-gap: $col-gap;
        grid-row-gap: $row-gap;
        margin-top: initial;
        margin-left: initial;

        #{$grid-item} {
            width: auto;
            margin-top: initial;
            margin-left: initial;
        }
    }
}
