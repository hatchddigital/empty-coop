////
//// Manifest
//// Staging file to pull in all sass components
////

/// Utils
/// Define variables, mixins, placeholders and functions
/// to be used throughout the project
@import 'utils/variables/fonts';
@import 'utils/variables/colours';
@import 'utils/variables/breakpoints';
@import 'utils/functions';
@import 'utils/mixins';
@import 'utils/js-mediaquery';
@import 'utils/placeholders';

/// Establish any resource using an @rule
/// Set rules for any CSS resource requiring an @ prefix,
/// such as @animate rules or @font-face fonts
@import 'resources/webfonts';

/// Create a clean slate
/// Ensure we level any browser differences, so we can build any
/// subsequent declarations on level ground
@import 'html-elements/normalize';

/// Set base rules that can apply site-wide
/// These should apply to naked elements, no classes should be defined here
@import 'html-elements/typography';
//@import 'html-elements/code';
@import 'html-elements/links';
@import 'html-elements/buttons';
@import 'html-elements/formelements';
@import 'html-elements/images';
@import 'html-elements/svgs';
@import 'html-elements/tables';

/// Define modular components
/// Reusable components, called with a class (or classes)
/// that can exist anywhere in the site
@import 'reusable-components/template';

/// Set static page elements
/// The scaffolding of the site, defined through elements that occur only
/// once per page, defined via an aria role or ID
@import 'page-elements/site-outer';
@import 'page-elements/site-header';
@import 'page-elements/page-content';
@import 'page-elements/site-footer';

/// Set page layout(s)
/// Rules unique to a specific template or set of templates.
/// These definitions should be set from a unique class
@import 'page-layouts/layout-template';

/// Pull in 'shame' styles
/// A temporary home for styles that need to be written
/// quickly, by devs not direclty working on the front end
/// or just because something needs to be sketched out real quick
@import 'shame';
